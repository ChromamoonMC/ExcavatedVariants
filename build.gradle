plugins {
    alias libs.plugins.quilt.licenser apply false
    alias libs.plugins.mdg.plugin
    alias libs.plugins.managedversioning
    alias libs.plugins.architectury.loom apply false
}

managedVersioning {
    versionFile.set rootProject.file('version.properties')
    metadataVersion.set libs.versions.minecraft
    versionPRs()
    versionSnapshots()

    gitHubActions {
        snapshot {
            prettyName.set 'Snapshot'
            workflowDispatch.set(true)
            onBranches.add '1.*'
            gradleJob {
                buildCache()
                name.set 'build'
                gradlew 'Build', 'checkLicenses', 'build'
                gradlew 'Publish', 'publish'
                mavenSnapshot('github')
            }
        }
        release {
            prettyName.set 'Release'
            workflowDispatch.set(true)
            gradleJob {
                buildCache()
                name.set 'build'
                step {
                    setupGitUser()
                }
                readOnly.set false
                gradlew 'Tag Release', 'tagRelease'
                gradlew 'Build', 'checkLicenses', 'build'
                step {
                    run.set 'git push && git push --tags'
                }
                gradlew 'Publish', 'publish', 'modrinth', 'curseforge'
                mavenRelease('github')
                modPublishing()
            }
        }
        build_pr {
            prettyName.set 'Build PR'
            pullRequest.set(true)
            gradleJob {
                name.set 'build'
                gradlew 'Build', 'checkLicenses', 'build'
                gradlew 'Publish', 'publish'
                pullRequestArtifact()
            }
        }
        publish_pr {
            prettyName.set 'Publish PR'
            publishPullRequestAction(
                    'github',
                    'dev/lukebemish/dynamicassetgenerator/dynamicassetgenerator-*',
                    'Build PR'
            )
        }
    }
}

managedVersioning.apply()

println "Building: $version"

configurations {
    license {
        canBeResolved = false
        canBeConsumed = true
    }
}

artifacts {
    add 'license', file("LICENSE")
}

modsDotGroovy {
    dslVersion = libs.versions.mdg.dsl.get()
    platform 'multiloader'
    multiloader {
        forge = [project(':neoforge')]
        fabric = [project(':fabriquilt')]
        quilt = [project(':fabriquilt')]
    }
}

subprojects { p ->
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'
    apply plugin: libs.plugins.quilt.licenser.get().pluginId

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()
    java.withJavadocJar()

    license {
        rule rootProject.file('header.txt')
        exclude '**/*.mcmeta'
        exclude '**/package-info.java'
    }

    jar {
        manifest {
            attributes([
                'Implementation-Commit-Time': managedVersioning.timestamp.get(),
                'Implementation-Commit': managedVersioning.hash.get()
            ])
        }
    }

    publishing {
        repositories {
            if (System.getenv('PR_NUMBER')) {
                maven {
                    name = 'LocalMaven'
                    url = rootProject.layout.buildDirectory.dir('repo')
                }
            } else if (System.getenv('MAVEN_PASSWORD')) {
                maven {
                    name = 'PersonalMaven'
                    url = uri(System.getenv('SNAPSHOT_MAVEN_URL') ?: System.getenv('MAVEN_URL'))
                    credentials {
                        username = System.getenv('MAVEN_USER')
                        password = System.getenv('MAVEN_PASSWORD')
                    }
                }
            }
        }
    }
}

javadoc {
    source subprojects.collect { it.sourceSets.main.allJava }
    classpath = files(subprojects.collect { it.sourceSets.main.compileClasspath })
    include "**/api/**"
}

tasks.register('prepareJavadoc', Copy) {
    dependsOn tasks.javadoc
    from tasks.javadoc.outputs
    into layout.buildDirectory.dir("prepareJavadoc/${project.group.replace('.','/')}/${project.version.split('\\.')[0]}")
}
